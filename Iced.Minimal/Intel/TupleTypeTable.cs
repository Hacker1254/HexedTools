// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

#if DEBUG || ENCODER
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace Iced.Intel {
	static class TupleTypeTable {
#if HAS_SPAN
		static ReadOnlySpan<byte> tupleTypeData =>
#else
		internal static readonly byte[] tupleTypeData =
#endif
			new byte[] {
				// GENERATOR-BEGIN: TupleTypeTable
				// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
				// TupleType.N1
				0x01,// N
				0x01,// Nbcst
				// TupleType.N2
				0x02,// N
				0x02,// Nbcst
				// TupleType.N4
				0x04,// N
				0x04,// Nbcst
				// TupleType.N8
				0x08,// N
				0x08,// Nbcst
				// TupleType.N16
				0x10,// N
				0x10,// Nbcst
				// TupleType.N32
				0x20,// N
				0x20,// Nbcst
				// TupleType.N64
				0x40,// N
				0x40,// Nbcst
				// TupleType.N8b4
				0x08,// N
				0x04,// Nbcst
				// TupleType.N16b4
				0x10,// N
				0x04,// Nbcst
				// TupleType.N32b4
				0x20,// N
				0x04,// Nbcst
				// TupleType.N64b4
				0x40,// N
				0x04,// Nbcst
				// TupleType.N16b8
				0x10,// N
				0x08,// Nbcst
				// TupleType.N32b8
				0x20,// N
				0x08,// Nbcst
				// TupleType.N64b8
				0x40,// N
				0x08,// Nbcst
				// TupleType.N4b2
				0x04,// N
				0x02,// Nbcst
				// TupleType.N8b2
				0x08,// N
				0x02,// Nbcst
				// TupleType.N16b2
				0x10,// N
				0x02,// Nbcst
				// TupleType.N32b2
				0x20,// N
				0x02,// Nbcst
				// TupleType.N64b2
				0x40,// N
				0x02,// Nbcst
				// GENERATOR-END: TupleTypeTable
			};

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static uint GetDisp8N(TupleType tupleType, bool bcst) {
			int index = ((int)tupleType << 1) | (bcst ? 1 : 0);
			Debug.Assert((uint)index < (uint)tupleTypeData.Length);
			return tupleTypeData[index];
		}
	}
}
#endif
