// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#nullable enable

#if ENCODER && BLOCK_ENCODER && CODE_ASSEMBLER
namespace Iced.Intel {
	/// <summary>
	/// Registers used for <see cref="Assembler"/>. 
	/// </summary>
	public static partial class AssemblerRegisters {
		/// <summary>
		/// Gets a memory operand with no size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __ = new AssemblerMemoryOperandFactory(MemoryOperandSize.None);

		/// <summary>
		/// Gets a memory operand with a <c>BYTE PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __byte_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Byte);

		/// <summary>
		/// Gets a memory operand with a <c>WORD PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __word_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Word);

		/// <summary>
		/// Gets a memory operand with a <c>DWORD PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __dword_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Dword);

		/// <summary>
		/// Gets a memory operand with a <c>QWORD PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __qword_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Qword);

		/// <summary>
		/// Gets a memory operand with an <c>MMWORD PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __mmword_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Qword);

		/// <summary>
		/// Gets a memory operand with a <c>TBYTE PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __tbyte_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Tbyte);

		/// <summary>
		/// Gets a memory operand with a <c>TWORD PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __tword_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Tbyte);

		/// <summary>
		/// Gets a memory operand with an <c>FWORD PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __fword_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Fword);

		/// <summary>
		/// Gets a memory operand with an <c>OWORD PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __oword_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Xword);

		/// <summary>
		/// Gets a memory operand with an <c>XMMWORD PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __xmmword_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Xword);

		/// <summary>
		/// Gets a memory operand with a <c>YMMWORD PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __ymmword_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Yword);

		/// <summary>
		/// Gets a memory operand with a <c>ZMMWORD PTR</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __zmmword_ptr = new AssemblerMemoryOperandFactory(MemoryOperandSize.Zword);

		/// <summary>
		/// Gets a broadcast memory operand with no size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __bcst = new AssemblerMemoryOperandFactory(MemoryOperandSize.None, Register.None, AssemblerOperandFlags.Broadcast);

		/// <summary>
		/// Gets a broadcast memory operand with a <c>WORD BCST</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __word_bcst = new AssemblerMemoryOperandFactory(MemoryOperandSize.Word, Register.None, AssemblerOperandFlags.Broadcast);

		/// <summary>
		/// Gets a broadcast memory operand with a <c>DWORD BCST</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __dword_bcst = new AssemblerMemoryOperandFactory(MemoryOperandSize.Dword, Register.None, AssemblerOperandFlags.Broadcast);

		/// <summary>
		/// Gets a broadcast memory operand with a <c>QWORD BCST</c> size hint
		/// </summary>
		public static readonly AssemblerMemoryOperandFactory __qword_bcst = new AssemblerMemoryOperandFactory(MemoryOperandSize.Qword, Register.None, AssemblerOperandFlags.Broadcast);
	}
}
#endif
